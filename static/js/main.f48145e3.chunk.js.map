{"version":3,"sources":["Component/Todotemplat.js","Component/Todoheader.js","Component/TodoList.js","Component/Todoitem.js","Component/Todocreate.js","ListDate.js","App.js","serviceWorker.js","index.js"],"names":["TodoBackground","style","div","Todotemplat","children","HeadeBlock","Todoheader","date","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","count","filter","item","content","length","Todolist","TodoList","Remove","Itembox","Todoitem","onCheck","dateDel","onSpan","useEffect","setTimeout","borderColor","color","onClick","text","span","Createlist","CreateButton","button","Todocreate","inputs","inputText","onSumit","onBox","crateBox","onSubmit","onChange","placeholder","value","backgroundColor","id","GlobalStyle","createGlobalStyle","App","useState","ListDate","setDate","setInputs","newId","setNewId","setCrateBox","className","map","i","n","array","splice","key","e","target","preventDefault","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f48145e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from 'styled-components';\r\n\r\nconst TodoBackground = style.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 0 auto;\r\n    margin-top: 100px;\r\n    margin-bottom:100px;\r\n    width: 500px;\r\n    height: 700px;\r\n    background: #fff;\r\n    border-radius: 25px;\r\n    position: relative;\r\n    box-shadow: 2px 2px 10px #dedede;\r\n`;\r\n\r\nfunction Todotemplat({ children }) {\r\n  return <TodoBackground>{children}</TodoBackground>;\r\n}\r\n\r\nexport default Todotemplat;\r\n","import React from 'react';\r\nimport style from 'styled-components';\r\n\r\nconst HeadeBlock = style.div`\r\n    padding: 40px 40px 25px 40px;\r\n    border-bottom: 1px solid #eee;\r\n    p {\r\n        font-size: 22px;\r\n        color: #666;\r\n        margin: 10px 0 30px 0;\r\n    }\r\n    span {\r\n        color: #20c997;\r\n        font-weight: bold;\r\n        font-size: 18px;\r\n        margin-top: 50px;\r\n    }\r\n    `;\r\n\r\nfunction Todoheader({ date }) {\r\n  const today = new Date();\r\n  const dateString = today.toLocaleDateString('ko-KR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  });\r\n  const dayName = today.toLocaleDateString('ko-KR', { weekday: 'long' });\r\n\r\n  const count = date.filter((item) => {\r\n    return item.content == true;\r\n  });\r\n\r\n  return (\r\n    <HeadeBlock>\r\n      <h1>{dateString}</h1>\r\n      <p>{dayName}</p>\r\n      <span>할 일 {count.length}개 남음</span>\r\n    </HeadeBlock>\r\n  );\r\n}\r\n\r\nexport default Todoheader;\r\n","import React from 'react';\r\nimport style from 'styled-components';\r\n\r\nconst Todolist = style.div`\r\n    flex:1;\r\n    width: 100%;\r\n    padding: 25px 40px;\r\n    overflow-y: auto;\r\n`;\r\nfunction TodoList({ children }) {\r\n  return <Todolist>{children}</Todolist>;\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useEffect } from 'react';\r\nimport style from 'styled-components';\r\nconst Remove = style.div`\r\n    border: none;\r\n    color: #ff6767;\r\n    font-weight: 900;\r\n    line-height: 40px;\r\n    cursor: pointer;\r\n    display: none;\r\n`;\r\nconst Itembox = style.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 10px 0;\r\n    &:hover {\r\n        ${Remove} {\r\n            display: block;\r\n        }\r\n    }\r\n    button {\r\n        width: 40px;\r\n        height: 40px;\r\n        border-radius: 40px;\r\n        background:none;\r\n        border: 2px solid #ddd;\r\n        cursor: pointer;\r\n    }\r\n    p {\r\n        line-height: 40px;\r\n        font-size: 20px;\r\n        flex:1;\r\n        margin-left: 20px;\r\n    }\r\n    span {\r\n        font-size: 15px;\r\n        color: #ff6767;\r\n        margin-left: 20px;\r\n    }\r\n`;\r\n\r\nfunction Todoitem({ date, onCheck, dateDel, onSpan }) {\r\n  useEffect(() => {\r\n    setTimeout(function () {\r\n      onSpan();\r\n    }, 2000);\r\n  }, []);\r\n  return (\r\n    <Itembox>\r\n      <button\r\n        style={{\r\n          borderColor: date.content ? '#ddd' : '#20c997',\r\n          color: date.content ? '#ddd' : '#20c997',\r\n        }}\r\n        onClick={onCheck}\r\n      >\r\n        {date.content ? '' : '✔'}\r\n      </button>\r\n      <p style={{ color: date.content ? '#222' : '#ddd' }}>\r\n        {date.text}\r\n        {date.span ? <span>New</span> : null}\r\n      </p>\r\n      <Remove onClick={dateDel}>삭제</Remove>\r\n    </Itembox>\r\n  );\r\n}\r\n\r\nexport default Todoitem;\r\n","import React from 'react';\r\nimport style from 'styled-components';\r\n\r\nconst Createlist = style.div`\r\n    width: 100%;\r\n    height: 150px;\r\n    background: #f5f5f5;\r\n    border-radius: 0 0 25px 25px;\r\n    input {\r\n        border: 1px solid #e6e6e6;\r\n        border-radius: 10px;\r\n        width: 400px;\r\n        height: 40px;\r\n        padding: 20px 20px;\r\n        margin-top: 30px;\r\n        margin-left: 50px;\r\n    }\r\n`;\r\n\r\nconst CreateButton = style.button`\r\n    width: 80px;\r\n    height: 80px;\r\n    background: #20c997;\r\n    &:hover {\r\n        background: #ff8787;\r\n    }\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 50%;\r\n    border: none;\r\n    border-radius: 50px;\r\n    cursor: pointer;\r\n    font-size: 80px;\r\n    color: #fff;\r\n    line-height: 80px;\r\n    transform: translate(-50%, 50%);\r\n    transition: 0.15s all ease-in;\r\n    `;\r\n\r\nfunction Todocreate({ date, inputs, inputText, onSumit, onBox, crateBox }) {\r\n  return (\r\n    <>\r\n      {crateBox == true ? (\r\n        <Createlist>\r\n          <form onSubmit={onSumit}>\r\n            <input\r\n              onChange={inputText}\r\n              placeholder=\"할 일을 입력 후, 'Enter'를 누르세요.\"\r\n              value={inputs}\r\n            />\r\n          </form>\r\n        </Createlist>\r\n      ) : null}\r\n      <CreateButton\r\n        onClick={onBox}\r\n        style={{ backgroundColor: crateBox ? '#ff6767' : '#20c997' }}\r\n      >\r\n        +\r\n      </CreateButton>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todocreate;\r\n","export default [\r\n  {\r\n    id: 0,\r\n    text: '오늘 할 일 1번째',\r\n    content: true,\r\n    span: false,\r\n  },\r\n\r\n  {\r\n    id: 1,\r\n    text: '오늘 할 일 2번째',\r\n    content: true,\r\n    span: false,\r\n  },\r\n\r\n  {\r\n    id: 2,\r\n    text: '오늘 할 일 3번째',\r\n    content: true,\r\n    span: false,\r\n  },\r\n];\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Todotemplat from './Component/Todotemplat.js';\nimport Todoheader from './Component/Todoheader.js';\nimport TodoList from './Component/TodoList.js';\nimport Todoitem from './Component/Todoitem.js';\nimport Todocreate from './Component/Todocreate.js';\nimport ListDate from './ListDate.js';\nimport { createGlobalStyle } from 'styled-components';\nimport { isElement } from 'react-dom/test-utils';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n  }\n`;\n\nfunction App() {\n  const [date, setDate] = useState(ListDate);\n  const [inputs, setInputs] = useState('');\n  const [newId, setNewId] = useState(2);\n  const [crateBox, setCrateBox] = useState(false);\n\n  const onSpan = (n) => {\n    let array = [...date];\n    array[n].span = false;\n    setDate(array);\n  };\n\n  const onBox = () => {\n    setCrateBox(!crateBox);\n  };\n\n  const onSumit = (e) => {\n    e.preventDefault();\n    let array = [...date];\n    array.push({\n      id: newId + 1,\n      text: inputs,\n      content: true,\n      span: true,\n    });\n    setNewId(+1);\n    setDate(array);\n    setInputs('');\n  };\n\n  const inputText = (e) => {\n    setInputs(e.target.value);\n  };\n\n  const onCheck = (n) => {\n    let array = [...date];\n    array[n].content = !array[n].content;\n    setDate(array);\n  };\n\n  const dateDel = (n) => {\n    let array = [...date];\n    array.splice(n, 1);\n    setDate(array);\n  };\n\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Todotemplat>\n        <Todoheader date={date}></Todoheader>\n        <TodoList>\n          {date.map((item, i) => {\n            return (\n              <Todoitem\n                date={date[i]}\n                onCheck={() => {\n                  onCheck(i);\n                }}\n                dateDel={() => {\n                  dateDel(i);\n                }}\n                onSpan={() => {\n                  onSpan(i);\n                }}\n                key={i}\n              />\n            );\n          })}\n        </TodoList>\n        <Todocreate\n          date={date}\n          inputText={inputText}\n          inputs={inputs}\n          onSumit={onSumit}\n          onBox={onBox}\n          crateBox={crateBox}\n        ></Todocreate>\n      </Todotemplat>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}